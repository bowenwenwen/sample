SELECT ten.id tenant_id,
       ten.tenant_name tenant_name,
       tenanttype.name tenanttype,
       c.solution_id solution_id,
       c.employee_count employee_count,
       ten.short_name SCHEMA_NAME,
                      inst.instance_name instance_name,
                      env.environment_name environment_name,
                      ten.custom_tags,
                      wfm.db_url jdbc_url,
                      vurl.vanity_urls,
                      ten.creation_date,
                      tenn.first_creation_date,
                      replace(wfm.wfm_cluster_name, split_part(wfm.wfm_cluster_name, '-', 4), split_part(wfm.db_url, '-', 4)) AS wfm_cluster_name,
                      ent.ABSENCE_MANAGEMENT_ENTITLEMENT,
                      ent.WORKFORCE_SCHEDULER_EMPLOYEE_ENTITLEMENT,
                      ent.HOURLY_TIMEKEEPING_ENTITLEMENT,
                      ent.CORE_ANALYTICS_ENTITLEMENT,
                      ent.HC_ANALYTICS_ENTITLEMENT,
                      ent.COMMUNICATIONS_ENTITLEMENT,
                      ent.ADVANCED_SCHEDULING_ENTITLEMENT,
                      ent.ACCRUALS_AND_LEAVES_ENTITLEMENT,
                      ent.ACCRUALS_ENTITLEMENT,
                      ent.SALARIED_TIMEKEEPING_ENTITLEMENT,
                      ent.OPTIMIZED_SCHEDULING_WITH_FORECASTING_ENTITLEMENT,
                      ent.WORK_ENTITLEMENT,
                      envCounts.prod_envs,
                      envCounts.nonprod_envs,
                      v.vendor_name
FROM
  (SELECT solution_id,
          NVL(SUM(seats) FILTER (
                                 WHERE upper(package_name) = 'WORKFORCE_SCHEDULER_EMPLOYEE'), 0) AS WORKFORCE_SCHEDULER_EMPLOYEE_ENTITLEMENT,
          NVL(SUM(seats) FILTER (
                                 WHERE upper(package_name) = 'ABSENCE_MANAGEMENT'), 0) AS ABSENCE_MANAGEMENT_ENTITLEMENT,
          NVL(SUM(seats) FILTER (
                                 WHERE upper(package_name) = 'HOURLY_TIMEKEEPING'), 0) AS HOURLY_TIMEKEEPING_ENTITLEMENT,
          NVL(SUM(seats) FILTER (
                                 WHERE upper(package_name) = 'CORE_ANALYTICS'), 0) AS CORE_ANALYTICS_ENTITLEMENT,
          NVL(SUM(seats) FILTER (
                                 WHERE upper(package_name) = 'HC_ANALYTICS'), 0) AS HC_ANALYTICS_ENTITLEMENT,
          NVL(SUM(seats) FILTER (
                                 WHERE upper(package_name) = 'ADVANCED_SCHEDULING'), 0) AS ADVANCED_SCHEDULING_ENTITLEMENT,
          NVL(SUM(seats) FILTER (
                                 WHERE upper(package_name) = 'ACCRUALS_AND_LEAVES'), 0) AS ACCRUALS_AND_LEAVES_ENTITLEMENT,
          NVL(SUM(seats) FILTER (
                                 WHERE upper(package_name) = 'ACCRUALS'), 0) AS ACCRUALS_ENTITLEMENT,
          NVL(SUM(seats) FILTER (
                                 WHERE upper(package_name) = 'SALARIED_TIMEKEEPING'), 0) AS SALARIED_TIMEKEEPING_ENTITLEMENT,
          NVL(SUM(seats) FILTER (
                                 WHERE upper(package_name) = 'ADVANCED_PLANNING_SCHEDULING'), 0) AS OPTIMIZED_SCHEDULING_WITH_FORECASTING_ENTITLEMENT,
          NVL(SUM(seats) FILTER (
                                 WHERE upper(package_name) = 'WORK'), 0) AS WORK_ENTITLEMENT,
          NVL(SUM(seats) FILTER (
                                 WHERE upper(package_name) = 'COMMUNICATIONS'), 0) AS COMMUNICATIONS_ENTITLEMENT
   FROM tmsservice.entitlement
   WHERE end_date >=now()
     AND start_date <= now()
   GROUP BY solution_id) AS ent,

  (SELECT tenant_id,
          string_agg(vanity_url, ', ') vanity_urls
   FROM tmsservice.vanity_url_details
   GROUP BY tenant_id) AS vurl,

  (SELECT c.solution_id,
          nvl(sum(CASE ttype.name
                      WHEN 'Customer Production' THEN 1
                  END), 0) prod_envs,
          nvl(sum(CASE ttype.name
                      WHEN 'Customer Non-Production' THEN 1
                  END), 0) nonprod_envs
   FROM tmsservice.tenant ten
   LEFT OUTER JOIN tmsservice.tenant_type ttype ON (ten.tenant_type_id = ttype.id)
   INNER JOIN tmsservice.client c ON (ten.client_id = c.id)
   INNER JOIN tmsservice.tenant_status tstat ON (ten.tenant_status_id = tstat.id)
   INNER JOIN tmsservice.vendor v ON (ten.vendor_id = v.id)
   INNER JOIN tmsservice.wfm_cluster wfm ON (ten.wfm_cluster_id = wfm.id)
   INNER JOIN tmsservice.instance inst ON (wfm.instance_id = inst.id)
   INNER JOIN tmsservice.environment env ON (inst.environment_id = env.id)
   WHERE tstat.name = 'active'
     AND v.vendor_name ilike '%'
     AND upper(env.environment_name) not like 'NXT%'
   GROUP BY c.solution_id) AS envCounts,
     tmsservice.tenant ten
INNER JOIN tmsservice.tenant_type ttype ON (ten.tenant_type_id = ttype.id)
INNER JOIN tmsservice.client c ON (ten.client_id = c.id)
INNER JOIN tmsservice.tenant_status tstat ON (ten.tenant_status_id = tstat.id)
INNER JOIN tmsservice.environment_type etype ON (ttype.environment_type_id = etype.id)
INNER JOIN tmsservice.wfm_cluster wfm ON (ten.wfm_cluster_id = wfm.id)
INNER JOIN tmsservice.instance inst ON (wfm.instance_id = inst.id)
INNER JOIN tmsservice.environment env ON (inst.environment_id = env.id)
INNER JOIN tmsservice.vendor v ON (ten.vendor_id = v.id)
INNER JOIN
  (SELECT tenant_name,
          min(creation_date) first_creation_date
   FROM tmsservice.tenant
   GROUP BY 1) tenn ON (ten.tenant_name = tenn.tenant_name)
INNER JOIN tmsservice.tenant_type tenanttype ON (ten.tenant_type_id = tenanttype.id)
WHERE ent.solution_id = c.solution_id
  AND c.solution_id = envCounts.solution_id
  AND ten.id = vurl.tenant_id
  AND v.vendor_name ilike '%'
  AND tstat.name = 'active'